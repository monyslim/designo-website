name: CI

on:
  push:
    branches:
      - main

jobs:
  test-and-build:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install dependencies
        run: npm install

      - name: Install puppeteer
        run: npm install puppeteer

      - name: Install http-server
        run: npm install -g http-server

      - name: Start HTTP server
        run: |
          nohup http-server . -p 80 &
          sleep 5

      - name: Run QUnit tests using Puppeteer
        run: |
          mkdir -p test-reports
          node << 'RUN_TESTS'
          const puppeteer = require('puppeteer');
          const fs = require('fs');
          (async () => {
            const browser = await puppeteer.launch({
              headless: true,
              args: ['--no-sandbox', '--disable-setuid-sandbox']
            });
            const page = await browser.newPage();
            const results = [];
            
            page.on('console', (msg) => {
              console.log(`Console log: ${msg.text()}`);
              results.push(msg.text());
            });

            try {
              console.log('Attempting to load the page...');
              await page.goto('http://localhost:80/index.html', { waitUntil: 'load', timeout: 15000 });
              console.log('Page loaded successfully.');
            } catch (error) {
              console.error('Failed to load the page:', error.message);
              results.push(`Error loading page: ${error.message}`);
            }

            // Close the browser and write logs
            await browser.close();
            fs.writeFileSync('test-reports/results.log', results.join('\n'));
          })();
          RUN_TESTS

      - name: Upload test report
        uses: actions/upload-artifact@v3
        with:
          name: test-reports
          path: test-reports/results.log

      # Step 6: Install Docker Engine
      - name: Install Docker Engine
        uses: docker/setup-buildx-action@v2
        with:
          version: 'latest'

      # Step 7: Log in to Docker Hub
      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 8: Build the Docker image
      - name: Build the Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/new-image:1.0.0 .

      # Step 9: Push the Docker image to Docker Hub
      - name: Push the Docker image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/new-image:1.0.0
